//
//	Package - transpiled by c4go
//
//	If you have found any issues, please raise an issue at:
//	https://github.com/Konstantin8105/c4go/
//

package code_quality

import "reflect"
import "runtime"
import "unsafe"
import "github.com/Konstantin8105/c4go/noarch"

// a - transpiled function from  C4GO/tests/code_quality/ap.c:4
func a(v1 []int32) {
	// input argument - C-pointer
	noarch.Printf([]byte("a: %d\n\x00"), v1[0])
}

// b - transpiled function from  C4GO/tests/code_quality/ap.c:7
func b(v1 []int32, size int32) {
	// input argument - C-array
	for size -= 1; size >= 0; size-- {
		noarch.Printf([]byte("b: %d %d\n\x00"), size, v1[size])
	}
}

// get - transpiled function from  C4GO/tests/code_quality/ap.c:14
func get() int32 {
	return 0
}

// main - transpiled function from  C4GO/tests/code_quality/ap.c:19
func main() {
	// value
	var i1 int32 = 42
	a(c4goUnsafeConvert_int32(&i1))
	b(c4goUnsafeConvert_int32(&i1), 1)
	// C-array
	var i2 []int32 = []int32{11, 22}
	a(i2)
	b(i2, 2)
	// C-pointer from value
	var i3 []int32 = c4goUnsafeConvert_int32(&i1)
	a(i3)
	b(i3, 1)
	// C-pointer from array
	var i4 []int32 = i2
	a(i4)
	b(i4, 2)
	// C-pointer from array
	var i5 []int32 = i2[1:]
	a(i5)
	b(i5, 1)
	// pointer arithmetic
	var i6 []int32 = i5[0+1:]
	a(i6)
	b(i6, 1)
	// pointer arithmetic
	var val int32 = 2 - 2
	var i7 []int32 = c4goPointerArithInt32Slice(c4goPointerArithInt32Slice(c4goPointerArithInt32Slice(i5, int(1+(1-1)+val+0*(100-2))), int(0)), int(-(0 * 0)))
	a(i7)
	b(i7, 1)
	// pointer arithmetic
	var i8 []int32 = i5[0+1+0:]
	a(i8)
	b(i8, 1)
	// pointer arithmetic
	var i9 []int32 = []int32{i3[0], i3[0+1]}
	a(i9)
	b(i9, 1)
	// pointer arithmetic
	var i10 []int32 = i5[1+0+0+5*get()+get()+(12+3)*get():]
	a(i10)
	b(i10, 1)
	// pointer arithmetic
	var i11 []int32 = c4goPointerArithInt32Slice(i5[1+0+0+5*get()+get():], int(-((12 + 3) * get())))
	a(i11)
	b(i11, 1)
	return
}

// c4goUnsafeConvert_int32 : created by c4go
func c4goUnsafeConvert_int32(c4go_name *int32) []int32 {
	return (*[1000000]int32)(unsafe.Pointer(c4go_name))[:]
}

// c4goPointerArithInt32Slice - function of pointer arithmetic. generated by c4go
func c4goPointerArithInt32Slice(slice []int32, position int) []int32 {
	if position < 0 {
		// invert sign
		position = -position

		// Example from: go101.org/article/unsafe.html
		// repair size of slice
		var hdr reflect.SliceHeader
		sliceLen := len(slice)
		hdr.Data = uintptr(unsafe.Pointer(&slice[0])) - (uintptr(position))*unsafe.Sizeof(slice[0])
		runtime.KeepAlive(&slice[0]) // needed!
		hdr.Len = sliceLen + int(position)
		hdr.Cap = hdr.Len
		slice = *((*[]int32)(unsafe.Pointer(&hdr)))
		return slice
	}
	// position >= 0:
	return slice[position:]
}
