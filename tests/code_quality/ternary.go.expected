//
//	Package - transpiled by c4go
//
//	If you have found any issues, please raise an issue at:
//	https://github.com/Konstantin8105/c4go/
//

package code_quality

// test_min_max - transpiled function from  C4GO/tests/code_quality/ternary.c:18
func test_min_max() {
	{
		diag([]byte("char\x00"))
		var a byte = byte(54)
		var b byte = byte(-4 + 256)
		var c byte
		c = byte(func() int32 {
			if int32(a) > int32(b) {
				return int32(a)
			}
			return int32(b)
		}())
		c = byte(func() int32 {
			if int32(a) < int32(b) {
				return int32(a)
			}
			return int32(b)
		}())
		c = byte(func() int32 {
			if int32(b) < int32(a) {
				return int32(a)
			}
			return int32(b)
		}())
		c = byte(func() int32 {
			if int32(b) > int32(a) {
				return int32(a)
			}
			return int32(b)
		}())
		c = byte(func() int32 {
			if int32(a) > int32(b) {
				return int32(a)
			}
			return int32(b) + 1
		}())
		c = byte(func() int32 {
			if int32(a) < int32(b) {
				return int32(a) + 1
			}
			return int32(b)
		}())
		c = byte(func() int32 {
			if int32(b) < int32(a) {
				return int32(a)
			}
			return int32(b) + 1
		}())
		c = byte(func() int32 {
			if int32(b) > int32(a) {
				return int32(a) + 1
			}
			return int32(b)
		}())
	}
	{
		diag([]byte("short\x00"))
		var a int16 = 54
		var b int16 = int16(-4)
		var c int16
		c = int16(func() int32 {
			if int32(a) > int32(b) {
				return int32(a)
			}
			return int32(b)
		}())
		c = int16(func() int32 {
			if int32(a) < int32(b) {
				return int32(a)
			}
			return int32(b)
		}())
		c = int16(func() int32 {
			if int32(b) < int32(a) {
				return int32(a)
			}
			return int32(b)
		}())
		c = int16(func() int32 {
			if int32(b) > int32(a) {
				return int32(a)
			}
			return int32(b)
		}())
		c = int16(func() int32 {
			if int32(a) > int32(b) {
				return int32(a)
			}
			return int32(b) + 1
		}())
		c = int16(func() int32 {
			if int32(a) < int32(b) {
				return int32(a) + 1
			}
			return int32(b)
		}())
		c = int16(func() int32 {
			if int32(b) < int32(a) {
				return int32(a)
			}
			return int32(b) + 1
		}())
		c = int16(func() int32 {
			if int32(b) > int32(a) {
				return int32(a) + 1
			}
			return int32(b)
		}())
	}
	{
		diag([]byte("int\x00"))
		var a int32 = 54
		var b int32 = -4
		var c int32
		if a > b {
			c = a
		} else {
			c = b
		}
		if a < b {
			c = a
		} else {
			c = b
		}
		if b < a {
			c = a
		} else {
			c = b
		}
		if b > a {
			c = a
		} else {
			c = b
		}
		if a > b {
			c = a
		} else {
			c = b + 1
		}
		if a < b {
			c = a + 1
		} else {
			c = b
		}
		if b < a {
			c = a
		} else {
			c = b + 1
		}
		if b > a {
			c = a + 1
		} else {
			c = b
		}
	}
	{
		diag([]byte("float\x00"))
		var a float32 = 54
		var b float32 = float32(-4)
		var c float32
		if a > b {
			c = a
		} else {
			c = b
		}
		if a < b {
			c = a
		} else {
			c = b
		}
		if b < a {
			c = a
		} else {
			c = b
		}
		if b > a {
			c = a
		} else {
			c = b
		}
		if a > b {
			c = a
		} else {
			c = b + 1
		}
		if a < b {
			c = a + 1
		} else {
			c = b
		}
		if b < a {
			c = a
		} else {
			c = b + 1
		}
		if b > a {
			c = a + 1
		} else {
			c = b
		}
	}
	{
		diag([]byte("double\x00"))
		var a float64 = 54
		var b float64 = float64(-4)
		var c float64
		if a > b {
			c = a
		} else {
			c = b
		}
		if a < b {
			c = a
		} else {
			c = b
		}
		if b < a {
			c = a
		} else {
			c = b
		}
		if b > a {
			c = a
		} else {
			c = b
		}
		if a > b {
			c = a
		} else {
			c = b + 1
		}
		if a < b {
			c = a + 1
		} else {
			c = b
		}
		if b < a {
			c = a
		} else {
			c = b + 1
		}
		if b > a {
			c = a + 1
		} else {
			c = b
		}
	}
	{
		diag([]byte("long double\x00"))
		var a float64 = 54
		var b float64 = float64(-4)
		var c float64
		if a > b {
			c = a
		} else {
			c = b
		}
		if a < b {
			c = a
		} else {
			c = b
		}
		if b < a {
			c = a
		} else {
			c = b
		}
		if b > a {
			c = a
		} else {
			c = b
		}
		if a > b {
			c = a
		} else {
			c = b + 1
		}
		if a < b {
			c = a + 1
		} else {
			c = b
		}
		if b < a {
			c = a
		} else {
			c = b + 1
		}
		if b > a {
			c = a + 1
		} else {
			c = b
		}
	}
}
